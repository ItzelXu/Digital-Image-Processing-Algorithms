// This sample code reads in image data from a RAW image file and 
// writes it into another file

// NOTE:	The code assumes that the bridge input image is of size 600 x 400 and 
//			is in the RAW format. You will need to make corresponding changes to
//			accommodate images of different sizes and/or types

//EE 569: Homework 2 - By Brinal Bheda
//USC ID - 8470655102
//Email - bbheda@usc.edu
//Submission Date - 02/12/2019

/*
Random thresholding:-
Algorithm implemented in C++:
• Read the input image “bridge.raw” whose dimensions are height_size, width_size, BytesPerPixel
• For every pixel, threshold the image using random and fixed thresholding.
• For each pixel, generate a random number in the range 0~255 using rand ()
• Compare each pixel value/intensity with the random number generated by rand ()
• If pixel value is less than the random number, map to 0 else map to 255
• For the fixed method, use 127 instead of random number and repeat the method above
• Write the computed image data array on output.raw file using the fwrite() function

Dithering matrix:-
Algorithm implemented in C++:
• Read the input image “bridge.raw” whose dimensions are height_size, width_size, BytesPerPixel using fread () function
• The input image is normalized for values between 0-1 to implement the dithering method
• 2x2 index matrix is created
• Using recursive functions, find dithering matrices 4x4, 8x8, 16x16, 32x32 for window sizes/ different indexes 4, 8, 16 and 32 using the formula above
• Obtain the threshold matrices for I2, I4, I8, I16, I32
• For every pixel in the image, the input and threshold matrix are compared and set the pixel to 0 or 1 accordingly using decision rule
• Write the computed image data array on output.raw file using the fwrite() function
*/

// To run the code, open terminal, add path and run using following commands
// g++ -o 2a 2a_dithering.cpp
// ./2a bridge.raw output_2a_fixed_thresholding.raw 1
// ./2a bridge.raw output_2a_random_thresholding.raw 1
// ./2a bridge.raw output_2a_dithering_I2.raw 1
// ./2a bridge.raw output_2a_dithering_I4.raw 1
// ./2a bridge.raw output_2a_dithering_I8.raw 1
// ./2a bridge.raw output_2a_dithering_I16.raw 1
// ./2a bridge.raw output_2a_dithering_I32.raw 1

#include <stdio.h>
#include <iostream>
#include <stdlib.h>

using namespace std;

int main(int argc, char *argv[])

{
	// Define file pointer and variables
	FILE *file;
	int BytesPerPixel = 1;
	int width_size = 600;
	int height_size = 400;
	
	// Check for proper syntax
	if (argc < 3){
		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;
		cout << "program_name input_image.raw output_image.raw [BytesPerPixel = 1] [Size = 256]" << endl;
		return 0;
	}
	
	// Check if image is grayscale or color
	if (argc < 4){
		BytesPerPixel = 1; // default is grey image
	} 
	else {
		BytesPerPixel = atoi(argv[3]);
		// Check if size is specified
		if (argc >= 5){
			//Size = atoi(argv[4]);
		}
	}
	
	//golden gate bridge.raw grayscale input image
	// Allocate image data array
	unsigned char Imagedata[height_size][width_size][BytesPerPixel];

	// Read image (filename specified by first argument) into image data matrix
	if (!(file=fopen(argv[1],"rb"))) {
		cout << "Cannot open file: " << argv[1] <<endl;
		exit(1);
	}
	fread(Imagedata, sizeof(unsigned char), height_size*width_size*BytesPerPixel, file);
	fclose(file);

	///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////

	//Digital Halftoning

	//Problem 2a - Dithering


	//1. Random thresholding

	// Allocate image processing data array
	unsigned char Imagedata_random_thresholding[height_size][width_size][BytesPerPixel];

	for (int i=0; i<height_size; i++)
	{
		for (int j=0; j<width_size; j++)
		{
			for (int k=0; k<BytesPerPixel; k++)
			{
				//for each pixel, generate a random number in the range 0~255
				unsigned char random_number = rand()%256;

				//compare pixel value with rand()
				if (Imagedata[i][j][k] <= random_number)
				{
					//if pixel value is less than the random number, map it to 0
					Imagedata_random_thresholding[i][j][k] = 0;
				}
				else 
				{
					//if pixel value is greater than the random number, map it to 255
					Imagedata_random_thresholding[i][j][k] = 255;
				}
			}
		}
	}


	//1. Constant/Fixed thresholding

	// Allocate image processing data array
	unsigned char Imagedata_fixed_thresholding[height_size][width_size][BytesPerPixel];

	for (int i=0; i<height_size; i++)
	{
		for (int j=0; j<width_size; j++)
		{
			for (int k=0; k<BytesPerPixel; k++)
			{
				//compare pixel value with 127
				if (Imagedata[i][j][k] < 127)
				{
					//if pixel value is less than 127, map it to 0
					Imagedata_fixed_thresholding[i][j][k] = 0;
				}
				else 
				{
					//if pixel value is greater than 127, map it to 255
					Imagedata_fixed_thresholding[i][j][k] = 255;
				}
			}
		}
	}



	//2. Dithering Matrix

	// Allocate image processing data array
	unsigned char Imagedata_dithering_I2[height_size][width_size][BytesPerPixel];

	// Allocate image processing data array
	unsigned char Imagedata_dithering_I4[height_size][width_size][BytesPerPixel];

	// Allocate image processing data array
	unsigned char Imagedata_dithering_I8[height_size][width_size][BytesPerPixel];

	// Allocate image processing data array
	unsigned char Imagedata_dithering_I16[height_size][width_size][BytesPerPixel];

	// Allocate image processing data array
	unsigned char Imagedata_dithering_I32[height_size][width_size][BytesPerPixel];

	//define values of index matrix
	int index_2 = 2;
	int index_4 = 4;
	int index_8 = 8;
	int index_16 = 16;
	int index_32 = 32;

	int N2 = index_2/2;
	int N4 = index_4/2;
	int N8 = index_8/2;
	int N16 = index_16/2;
	int N32 = index_32/2;

	int x;           //temporary variable

	//for I2
	unsigned char Imagedata_temp2[index_2][index_2];

	for (int i=0; i<index_2; i++)
	{
		for (int j=0; j<index_2; j++)
		{
			Imagedata_temp2[i][j] = 0;
		}
	}

	for (int i=0; i<index_2; i++)
	{
		for (int j=0; j<index_2; j++)
		{
			if (i<N2 && j<N2)
			{
				x = 1;
			}
			else if (i<N2 && j>=N2)
			{
				x = 2;
			}
			else if (i>=N2 && j<N2)
			{
				x = 3;
			}
			else
			{
				x = 0;
			}

			Imagedata_temp2[i][j] = x;

			//cout << "The 2x2 Bayer matrix: " << Imagedata_temp2 <<endl;
		}
	}

	//calculate I4 using formula and I2
	unsigned char Imagedata_temp4[index_4][index_4];

	for (int i=0; i<index_4; i++)
	{
		for (int j=0; j<index_4; j++)
		{
			Imagedata_temp4[i][j] = 0;
		}
	}

	for (int i=0; i<index_4; i++)
	{
		for (int j=0; j<index_4; j++)
		{
			if (i<N4 && j<N4)
			{
				x = 1;
			}
			else if (i<N4 && j>=N4)
			{
				x = 2;
			}
			else if (i>=N4 && j<N4)
			{
				x = 3;
			}
			else
			{
				x = 0;
			}

			Imagedata_temp4[i][j] = 4 * Imagedata_temp2[i%2][j%2] + x;
		}
	}

	//calculate I8 using formula and I4
	unsigned char Imagedata_temp8[index_8][index_8];

	for (int i=0; i<index_8; i++)
	{
		for (int j=0; j<index_8; j++)
		{
			Imagedata_temp8[i][j] = 0;
		}
	}

	for (int i=0; i<index_8; i++)
	{
		for (int j=0; j<index_8; j++)
		{
			if (i<N8 && j<N8)
			{
				x = 1;
			}
			else if (i<N8 && j>=N8)
			{
				x = 2;
			}
			else if (i>=N8 && j<N8)
			{
				x = 3;
			}
			else
			{
				x = 0;
			}

			Imagedata_temp8[i][j] = 4 * Imagedata_temp4[i%4][j%4] + x;
		}
	}

	//calculate I16 using formula and I8
	unsigned char Imagedata_temp16[index_16][index_16];

	for (int i=0; i<index_16; i++)
	{
		for (int j=0; j<index_16; j++)
		{
			Imagedata_temp16[i][j] = 0;
		}
	}

	for (int i=0; i<index_16; i++)
	{
		for (int j=0; j<index_16; j++)
		{
			if (i<N16 && j<N16)
			{
				x = 1;
			}
			else if (i<N16 && j>=N16)
			{
				x = 2;
			}
			else if (i>=N16 && j<N16)
			{
				x = 3;
			}
			else
			{
				x = 0;
			}

			Imagedata_temp16[i][j] = 4 * Imagedata_temp8 [i%8][j%8] + x;
		}
	}

	//calculate I32 using formula and I16                                                   
	unsigned char Imagedata_temp32[index_32][index_32];

	for (int i=0; i<index_32; i++)
	{
		for (int j=0; j<index_32; j++)
		{
			Imagedata_temp32[i][j] = 0;
		}
	}

	for (int i=0; i<index_32; i++)
	{
		for (int j=0; j<index_32; j++)
		{
			if (i<N32 && j<N32)
			{
				x = 1;
			}
			else if (i<N32 && j>=N32)
			{
				x = 2;
			}
			else if (i>=N32 && j<N32)
			{
				x = 3;
			}
			else
			{
				x = 0;
			}

			Imagedata_temp32[i][j] = (double)(4 * Imagedata_temp16 [i%16][j%16] + x);
		}
	}

	
	//cout << "The 4x4 Bayer matrix: " << Imagedata_temp4 <<endl;
	//cout << "The 8x8 Bayer matrix: " << Imagedata_temp8 <<endl;
	//cout << "The 16x16 Bayer matrix: " << Imagedata_temp16 <<endl;
	//cout << "The 32x32 Bayer matrix: " << Imagedata_temp32 <<endl;


	//create output using I2 thresholding matrix
	for (int i=0; i<height_size; i++)
	{
		for (int j=0; j<width_size; j++)
		{
			for (int k=0; k<BytesPerPixel; k++)
			{
				if (Imagedata[i][j][k] <= ((Imagedata_temp2[i%2][j%2] + 0.5) /4) *255)
				{
					Imagedata_dithering_I2[i][j][k] = 0;
				}
				else
				{
					Imagedata_dithering_I2[i][j][k] = 255;
				}
			}
		}
	}

	//create output using I4 thresholding matrix
	for (int i=0; i<height_size; i++)
	{
		for (int j=0; j<width_size; j++)
		{
			for (int k=0; k<BytesPerPixel; k++)
			{
				if (Imagedata[i][j][k] <= ((Imagedata_temp4[i%4][j%4] + 0.5) /16) *255)
				{
					Imagedata_dithering_I4[i][j][k] = 0;
				}
				else
				{
					Imagedata_dithering_I4[i][j][k] = 255;
				}
			}
		}
	}

	//create output using I8 thresholding matrix
	for (int i=0; i<height_size; i++)
	{
		for (int j=0; j<width_size; j++)
		{
			for (int k=0; k<BytesPerPixel; k++)
			{
				if (Imagedata[i][j][k] <= ((Imagedata_temp8[i%8][j%8] + 0.5) /64) *255)
				{
					Imagedata_dithering_I8[i][j][k] = 0;
				}
				else
				{
					Imagedata_dithering_I8[i][j][k] = 255;
				}
			}
		}
	}

	//create output using I16 thresholding matrix
	for (int i=0; i<height_size; i++)
	{
		for (int j=0; j<width_size; j++)
		{
			for (int k=0; k<BytesPerPixel; k++)
			{
				if (Imagedata[i][j][k] <= ((Imagedata_temp16[i%16][j%16] + 0.5) /256) *255)
				{
					Imagedata_dithering_I16[i][j][k] = 0;
				}
				else
				{
					Imagedata_dithering_I16[i][j][k] = 255;
				}
			}
		}
	}

	//create output using I32 thresholding matrix
	for (int i=0; i<height_size; i++)
	{
		for (int j=0; j<width_size; j++)
		{
			for (int k=0; k<BytesPerPixel; k++)
			{
				if (((double)(Imagedata[i][j][k])) <= ((double)(((Imagedata_temp32[i%32][j%32] + 0.5) /1024) *255)))         
				{
					Imagedata_dithering_I32[i][j][k] = 0;
				}
				else
				{
					Imagedata_dithering_I32[i][j][k] = 255;
				}
			}
		}
	}



	// Write image data (filename specified by second argument) from image data matrix

	if (!(file=fopen(argv[2],"wb"))) {
		cout << "Cannot open file: " << argv[2] << endl;
		exit(1);
	}

	//fwrite(Imagedata_fixed_thresholding, sizeof(unsigned char), height_size*width_size*BytesPerPixel, file);
	//fwrite(Imagedata_random_thresholding, sizeof(unsigned char), height_size*width_size*BytesPerPixel, file);
	//fwrite(Imagedata_dithering_I2, sizeof(unsigned char), height_size*width_size*BytesPerPixel, file);
	//fwrite(Imagedata_dithering_I4, sizeof(unsigned char), height_size*width_size*BytesPerPixel, file);
	//fwrite(Imagedata_dithering_I8, sizeof(unsigned char), height_size*width_size*BytesPerPixel, file);
	//fwrite(Imagedata_dithering_I16, sizeof(unsigned char), height_size*width_size*BytesPerPixel, file);
	fwrite(Imagedata_dithering_I32, sizeof(unsigned char), height_size*width_size*BytesPerPixel, file);

	fclose(file);

	return 0;
}


/*
to observe output on ImageJ, 
Use: image type - 8-bit
width - 600
height - 400
*/

